/* 
:first-letter 为第一个字符的样式
:first-line 为第一行添加样式
:before 在元素内容的最前面添加的内容，需要配合content属性使用
:after 在元素内容的最后面添加的内容，需要配合content属性使用 


优先级
行内样式>ID选择器>类选择器>标签选择器 ， 首先加载标签选择器,再加载类选择器，然后加载ID选择器，最后加载行内样式

内外部样式加载顺序 就近原则
按照书写顺序依次加载，在同优先级的前提下，后加载的会覆盖先加载的同名样式，所以离的越近越优先

可以使用!important使某个样式有最高的优先级

color	        颜色	
line-height	    行高	                行之间的高度
text-align	    水平对齐方式	        取值：left、center、right
vertical-align	垂直对齐方式	        取值：top、middle、bottom可以用于图片和文字的对齐方式
text-indent	    首行缩进	
text-decoration	文本修饰	            取值：underline、overline、line-through
text-transform	字母大小写转换	        取值：lowercase、uppercase、capitalize首字母大写
letter-spacing	字符间距	
word-spacing	单词间距	            只对英文有效
white-space	    空白的处理方式	        文本超出后是否换行，取值：nowrap









*/

p:first-letter {
  color: red;
  font-size: 30px;
}
p:first-line {
  background: pink;
  text-decoration: underline;
}
p:before {
  content: "";
}
p:after {
  content: "";
}

/* color的四种写法

颜色名称：使用英文单词

16进制的RGB值：#RRGGBB
特定情况下可以缩写
#FFFFFF--->#FFF 白色 
#000000--->#000 黑色 
#FF0000--->#F00 红色 
#00FF00--->#0F0 绿色 
#0000FF--->#00F 蓝色 
#CCCCCC--->#CCC 灰色 
#FF7300--->无法简写
rgb函数：rgb(red,green,blue)
rgba函数：rbga(red,green,blue,alpha)
 */

.color {
  color: rgb(25, 90, 146);
  color: #fff;
  color: #000;
  color: #f00;
  color: #0f0;
  color: #00f;
  color: rgba(0, 255, 170, 0.466);
}

/* 
背景属性
background-color	    背景颜色	取值：transparent 透明
background-image	    背景图片	  必须使用url()方式指定图片的路径 如果是在css样式文件中使用相对路径，此时是相对于css文件，不是相对html文件
background-repeat	    背景图片的重复方式	 取值：repeat(默认)，repeat-x，repeat-y,no-repeat
background-position	    背景图片的显示位置	默认背景图显示在左上角
取值：
关键字：top、bottom、left、right、center
坐标：左上角为(0,0)坐标，向右为x正方向,向下为y正方向
CSS雪碧图，即CSS Sprites,也称为CSS精灵,一种CSS图像合并技术 含义：将网页中许多非常小的图标/图片整合到一张大图中，当访问面面时只需要下载一次，可以减少访问服务器的次数，提高性能
原理：使用background-position进行背景定位，使用坐标精确地定位出背景图片的位置

background-attachment	背景图片是否跟随滚动	 取值：scroll(默认)、fixed固定不动
background          	简写  简写属性：background:background-color|background-image|background-repeat|background-position 以空格隔开，书写顺序没有要求
*/

/* 
列表属性
list-style-type	    设置列表前的标记	取值：none、disc、circle、square、decimal 此时不再区分有序列表还是无序列表，只要设置列表前的标记就可以了
list-style-image	将图像作为列表前的标记	
list-style-position	设置标记的位置	取值：outside(默认)、inside
list-style	        简写	
 */

.first {
  list-style-type: circle;
}
.second {
  list-style-image: url(https://img2.baidu.com/it/u=3697453073,3304860876&fm=253&fmt=auto&app=138&f=JPEG?w=500&h=500);
}
.third {
  list-style-type: circle;
  list-style-position: inside;
}
.fourth {
  list-style: circle
    url(https://img2.baidu.com/it/u=3697453073,3304860876&fm=253&fmt=auto&app=138&f=JPEG?w=500&h=500)
    inside;
  /* list-style:none; */
}

.nav li {
  list-style: none;
  float: left;
  width: 70px;
}

/* 表格属性
border-collapse:表格中相邻的边框是否合并（折叠）为单一边框

取值：separated（默认） collapse 
*/

/* 盒子模型
盒子模型是网页布局的基础，将页面中所有元素都看作是一个盒子，盒子都包含以下几个属性：

width 宽度
height 高度
border 边框
padding 内边距
margin 外边距 

表示盒子的边框

分为四个方向：

上top、右right、下bottom、左left
border-top、border-right、border-bottom、border-left
每个边框包含三种样式：

border-top-color、border-top-width、border-top-style
border-right-color、border-right-width、border-right-style
border-bottom-color、border-bottom-width、border-bottom-style
border-left-color、border-left-width、border-left-style

style的取值
solid实线、dashed虚线、dotted点线、double双线、inset内嵌的3D线、outset外嵌的3D线

简写，三种方式：

按方向简写： 上右下左

border-top、border-right、border-bottom、border-left

书写顺序：

border-顺序：width style color

按样式简写：

border-color、border-width、border-style

书写顺序：

border-样式：top right bottom left

必须按顺时针方向书写，同时可以缩写：

border-width:2px;--------->四个边框的宽度均为2px
border-width:1px 2px;
border-width:1px 2px 4px;
规则：如果省略，则认为上下一样，左右一样

终级简写：

如果四个边框样式完全相同，border:width style color;

*/

div {
  width: 100px;
  height: 100px;
  background-color: #ccc;
  border-color: #a32828 #fff #faa #baf;
  border-width: 12px;
}

/* 
外边距的合并
当一个元素出现在另一个元素上面时，第一个元素的下边距与第二元素的上边距会发生合并
当一个元素包含在另一个元素中时，并且没有内边距或边框把外边距分隔开时，两个元素的上外边距会发生合并 */

div {
  width: 50px;
  height: 50px;
  background: #cccccc;
  border: 2px solid;
  border-color: #a32828 #fff #faa #baf;
}
.div1 {
  margin-bottom: 20px;
}
.div2 {
  margin-top: 30px;
}
.div3 {
  width: 100px;
  height: 100px;
  background: blue;
  margin-top: 20px;
  /* padding:2px;
*/ /* border:1px solid red; */
}
.div4 {
  margin-top: 30px;
}
p {
  margin: 20px 0;
}

/* 定位
通过position属性实现对元素的定位，有四种定位方式
static	    默认值	    按照常规文档流进行显示
relative	相对定位	相对于标签原来的位置进行的定位
absolute	绝对定位	相对于第一个非static定位的父标签的定位
fixed	    固定定位	相对于浏览器窗品进行定位 

设置定位方式后，还要设置定位属性（偏移量）：top、bottom、left、right

相对定位
先设置元素的position属性为relative,然后再设置偏移量

绝对定位
先设置父标签为非static定位，然后设置元素的position属性为absolute，最后再设置偏移量

注意：
一般来说都会将父标签设置为非static定位
如果父标签不是非static定位，则会相对于浏览器窗口进行定位
设置元素为绝对定位后，元素会浮到页面上方

固定定位
先设置元素的position属性为fixed，然后再设置偏移量

设置元素为固定定位后，元素会浮动在页面上方

z-index
设置元素定位方式后，元素会浮在页面上方，此时可以通过z-index属性设置优先级，控制元素的堆叠顺序

取值为数字，值越大优先级越高，默认为auto(大多数浏览器默认为0)

注意：只能给非static定位的元素设置z-index属性
*/

#container {
  width: 800px;
  border: 1px solid #000000;
  position: relative;
}
.div1,
.div2,
.div3,
.div4 {
  width: 100px;
  height: 50px;
}
.div1 {
  background: red;
  position: relative; /* 相对定位 */
  top: 20px;
  left: 50px;
  z-index: -5;
}
.div2 {
  background: blue;
  position: absolute;
  left: 100px;
  bottom: 50px;
  z-index: -8;
}
.div3 {
  background: green;
  position: fixed;
  bottom: 50px;
  left: 100px;
}
.div4 {
  background: cyan;
  visibility: hidden;
}

/* 元素显示与隐藏
display隐藏时不再占据页面中的空间，后面的元素会占用其位置

visibility隐藏时会占据页面中的空间，位置还保留在页面中，只是不显示 */

/* 
轮廓属性
轮廓outline,用于在元素周围绘制一个轮廓，位于border外围，可以突出显示元素

常用属性:

outline-width:  轮廓宽度
outline-color:  轮廓颜色
outline-style:  轮廓样式
outline         简写

在浏览器中，当鼠标单击或使用TAB键让一个表单或链接获得焦点时，该元素会有一个轮廓outline
优点：可以提高使用表单的用户体验
缺点：有时会影响美观 

outline和border的区别
border可以应用于所有html元素，而outline主要用于表单元素、超链接元素
当元素获得焦点时会自动出现outline轮廓效果，当失去焦点时会自动消失，这是浏览器默认行为
outline不影响元素的尺寸和位置，而border会影响


宽高相关
max-width:设置元素的最大宽度
max-height:设置元素的最大高度
min-width设置元素的最小宽度
min-height设置元素的最小高度

overflow属性
当元素内容溢出时该如何处理

常用取值：

visible 溢出时可见，显示在元素外，默认值
hidden  溢出的部分不可见（常用）
scroll  无论是否出现溢出始终出现滚动条
auto    溢出时自动出现滚动条


cursor属性
用于设置光标的形状

常用属性：

default默认光标，一般为箭头
pointer手形，光标移动超链接上时一般显示为手形
move表示可移动
text表示文 本
wait表示程序正忙，需要等待
help表示帮助
*/

span {
  cursor: help;
}

/* [属性]	选中含有指定属性的元素
[属性=属性值]	选中含有指定属性和指定属性值的元素
[属性^=属性值]	选中含有指定属性和指定属性值开头的元素
[属性$=属性值]	选中含有指定属性和指定属性值结尾的元素
[属性*=属性值]	选中指定属性名和含有指定属性值的元素 */

/* 第一种方法：选择含有指定属性的元素。
                语法：[属性名]{} */
/*选择属性名为title,设置字体颜色红色  */
[title] {
  color: red;
}
/* 第二种用法：选择含有指定属性及指定属性值的元素。
      语法：[属性名=属性值]{} */
/*选择属性名为title和属性值为ab的元素 ,设置字体颜色绿色 */
[title="ab"] {
  color: green;
}
/* 第三种用法：选择含有指定属性及指定属性之开头的元素。
      语法：[属性名^=属性值]{}  */
/* 选择属性名为title和属性值以ab开头的元素，设置背景色黄色 */
[title^="ab"] {
  background-color: yellow;
}
/* 第四种用法：选择含有指定属性及指定属性值结尾的元素。
      语法：[属性名$=属性值] */
/* 选择属性名为title和属性值以ab结尾的元素，设置字体为30px */
[title$="ab"] {
  font-size: 30px;
}
/* 第五种用法：选择含有指定属性，只要含有某个属性值的元素。
      语法：[属性值*=属性名]{} */
/* 选择属性名为title和属性值含有c的元素，设置背景色为绿色 */
[title*="c"] {
  background-color: green;
}

/**选择了.demo下所有带有id属性的a元素 **/

.demo a[id] {
  align-self: start;
}

/**选择了.demo下同时拥有href和title属性的a元素 **/

.demo a[href][title] {
  height: auto;
}

/**选择了.demo下id="first"的a元素 **/

.demo a[id="first"] {
  align-self: start;
}

/**选择了.demo下id="first"，且拥有title属性的a元素 **/

.demo a[id="first"][title] {
  text-align: center;
}

/** 匹配不到元素 **/

a[class="links"] {
  text-align: center;
}
/* 使用类选择器可以匹配到 */
.links {
  text-align: center;
}

/** 这个才能匹配到 **/

a[class="links item"] {
  text-align: center;
}

/** 使用包含操作符可以匹配到元素 **/

a[class~="links"] {
  text-align: center;
}

/** href属性值以"mailto:"开头的所有a元素 **/

a[href^="mailto:"] {
  text-align: center;
}

/** href属性值以"png"结尾的所有a元素 **/

a[href$="png"] {
}

/** title属性值中只要包含有"site"的所有a元素 **/

a[title*="site"] {

}

/** 匹配以value开头或等于value的值 **/

img[src|="figure"] {
  size: 3vh;
}
p::first-letter {
  color: #faa;
}


/* :enabled",":disabled",":checked"伪类称为 UI 元素状态伪类，这些主要是针对于 HTML 中的 Form 元素操作 */

/** 下面对所不可用的文本框设置样式 **/

input[type="text"]:disabled {
  color: red;
}

/** 下面对所选中的的复选框设置样式 **/

input[type="checkbox"]:checked {
  color: blue;
}


/* 结构伪类选择器
1，E:empty
选择没有子元素的元素，而且该元素也不包含任何文本节点 

E:first-of-type：类似于 E:fisrt-child，只不过它选择父元素内具有指定类型的第一个 E 元素
E:last-of-type：类似于 E:last-child，只不过它选择父元素内具有指定类型的最后一个 E 元素
E:nth-of-type(n)：类似于 E:nth-child(n)，只不过它选择父元素内具有指定类型的第 n 个 E 元素
E:nth-last-of-type(n)：类似于 E:nth-last-child(n)，只不过它选择父元素内具有指定类型的倒数第 n 个 E 元素
E:only-of-type：类似于 E:only-child，只不过它选择父元素只包含一个同类型子元素，且该子元素匹配 E 元素

*/

/** 比如有三个段落，其中一个段落什么都没有，完全是空的。想要这个p不显示，可这样写 **/

p:empty {

  display: none;

}

/* 否定伪类选择器
匹配所有除元素 F 外的 E 元素，类似以 jQuery 中的 :not 选择器。 */

/** 对form中所有input加边框，但又不想submit也起变化 **/

input:not([type="submit"]) {

  border: 1px solid red;

}

/* 网页选中文的效果 */
p::selection {

  background: red;

  color: #fff;

}