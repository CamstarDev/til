apiVersion: v1
kind: Pod
metadata:
  name: myapp
  labels:
    name: myapp
spec:
  containers:
  - name: myapp
    image: <Image>
    resources:
      limits:
        memory: "128Mi"
        cpu: 2
      requests: 
        memory: "64Mi"
        cpu: 1
    ports:
      - containerPort: 80

    lifecycle:
      postStart: 
        tcpSocket: 
          port: 121
          host: "127.0.01"
        httpGet:
          host: "127.0.01"
          path: /
          port: 80
          httpHeaders: 
            - name: "content-type"
              value: "application/json"
            
        exec: # 在容器启动的时候执行一个命令，修改掉nginx的默认首页内容
          command: ["/bin/sh", "-c", "echo postStart... > /usr/share/nginx/html/index.html"]
      preStop:
        exec: # 在容器停止之前停止nginx服务
          command: ["/usr/sbin/nginx","-s","quit"]
    #livenessProbe 决定是否重启容器，readinessProbe 决定是否将请求转发给容器。
    livenessProbe: 
      # 将会尝试访问一个用户容器的端口，如果能够建立这条连接，则认为程序正常，否则不正常
      tcpSocket:
        port: 8011
      #exec 执行的返回码为0表示正常，否则不正常
      exec:
        command:
          - cat
          - /tmp/healthy
      # 调用容器内Web应用的URL，如果返回的状态码在200和399之间，则认为程序正常，否则不正常
      httpGet:
        host: "127.0.01"
        path: /health
        port: 8083
    readinessProbe:
  - name: myapp1
    image: nginx:latest
    imagePullPolicy: IfNotPresent #如果本地不存在就去拉取 如果镜像tag为具体版本号， 默认策略是：IfNotPresent  如果镜像tag为：latest（最终版本） ，默认策略是always
    resources:
      limits:
        memory: 100
        cpu: "500m"

    ports:
      - name: nginx:latest
        containerPort: 80
        hostPort: 1122
        protocol: TCP # default is tcp
      - name: nginx-port-proxy
        containerPort: 8080








      
    
